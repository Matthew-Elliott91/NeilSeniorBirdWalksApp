# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Blazor Server app to Azure Web App

env:
  AZURE_WEBAPP_NAME: staging-neil-senior-bird-walks-hsfkbsb5d4hpgfe4  # your Azure Web App name
  AZURE_WEBAPP_PACKAGE_PATH: './publish'    # path where the web app is published
  DOTNET_VERSION: '8.0.x'                   # updated to .NET 8 for your project
  PROJECT_PATH: 'NeilSeniorBirdWalks'       # path to your project

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest   # Changed to windows for SQL Server tooling support

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release

      - name: Install EF Core CLI
        run: dotnet tool install --global dotnet-ef
      
      - name: Add dotnet-ef to PATH
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
        
      - name: Create SQL directory
        run: mkdir -p sql
        shell: pwsh
        
      - name: Generate SQL Migration Script
        run: |
          dotnet ef migrations script --idempotent --output sql/migration-script.sql --project "${{ env.PROJECT_PATH }}" --context ApplicationDbContext
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DATABASE_CONNECTION_STRING }}
        shell: pwsh

      - name: dotnet publish
        run: dotnet publish "${{ env.PROJECT_PATH }}" -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Upload migration script artifact
        uses: actions/upload-artifact@v4
        with:
          name: sql-scripts
          path: sql/migration-script.sql

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: blazor-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy:
    permissions:
      contents: none
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download application artifact
        uses: actions/download-artifact@v4
        with:
          name: blazor-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          
      - name: Download SQL artifact
        uses: actions/download-artifact@v4
        with:
          name: sql-scripts
          path: ./sql

      - name: Apply Database Migrations
        uses: azure/sql-action@v1
        with:
          server-name: ${{ secrets.SQL_SERVER_NAME }}
          connection-string: ${{ secrets.DATABASE_CONNECTION_STRING }}
          sql-file: './sql/migration-script.sql'

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
