@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@using Microsoft.AspNetCore.Components.Forms
@inject FileService FileService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Select Image</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudFileUpload T="IBrowserFile" Accept=".jpg,.jpeg,.png,.gif" OnFilesChanged="UploadFile">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload New Image
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (isUploading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
                }
            </MudItem>

            <MudItem xs="12">
                @if (images == null)
                {
                    <MudProgressCircular Indeterminate="true" />
                }
                else if (!images.Any())
                {
                    <MudAlert Severity="Severity.Info">No images found in the uploads folder.</MudAlert>
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Available Images</MudText>
                    <MudGrid>
                        @foreach (var image in images)
                        {
                            <MudItem xs="6" sm="4" md="3">
                                <MudCard Outlined="true" Class="@(selectedImage == image.FilePath ? "mud-border-primary" : "")"
                                         @onclick="() => SelectImage(image.FilePath)">
                                    <MudCardMedia Image="@image.FilePath" Height="150" />
                                    <MudCardContent Class="pa-2">
                                        <MudText Typo="Typo.caption" Align="Align.Center"  Style="text-wrap: wrap;">
                                            @GetOriginalFileName(image.FileName)
                                        </MudText>
                                        <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Secondary">
                                            @image.UploadDate.ToShortDateString()
                                        </MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="@string.IsNullOrEmpty(selectedImage)" OnClick="Submit">Select</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    private List<ImageFileInfo> images;
    private string selectedImage = string.Empty;
    private bool isUploading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadImagesAsync();
    }

    private async Task LoadImagesAsync()
    {
        images = FileService.GetUploadedImages();
        StateHasChanged();
    }

    private void SelectImage(string path)
    {
        selectedImage = path;
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            isUploading = true;
            if (e.File != null)
            {
                string extension = Path.GetExtension(e.File.Name).ToLowerInvariant();
                if (extension != ".jpg" && extension != ".jpeg" && extension != ".png" && extension != ".gif")
                {
                    Snackbar.Add("Only image files are allowed (.jpg, .jpeg, .png, .gif)", Severity.Error);
                    return;
                }


                var path = await FileService.SaveFileAsync(e.File);


                await LoadImagesAsync();


                selectedImage = path;

                Snackbar.Add("Image uploaded successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading image: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploading = false;
        }
    }

    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(selectedImage));
    }

    private void Cancel() => MudDialog.Cancel();

    // Removing the GUID for the User
    private string GetOriginalFileName(string fileName)
    {
        
        int underscoreIndex = fileName.IndexOf('_');
        if (underscoreIndex >= 0 && underscoreIndex < fileName.Length - 1)
        {
            
            return fileName.Substring(underscoreIndex + 1);
        }

        
        return fileName;
    }
}
