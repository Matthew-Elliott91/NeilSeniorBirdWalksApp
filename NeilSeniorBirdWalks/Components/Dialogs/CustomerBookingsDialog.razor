@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@inject CustomerService CustomerService
@inject BookingService BookingService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Bookings for @Customer?.FirstName @Customer?.LastName</MudText>
    </TitleContent>
    <DialogContent>
        @if (bookings == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (bookings.Count == 0)
        {
            <MudAlert Severity="Severity.Info">No bookings found for this customer.</MudAlert>
        }
        else
        {
            <MudTable Items="@bookings" Hover="true" Striped="true" Bordered="true">
                <HeaderContent>
                    <MudTh><MudTableSortLabel T="Booking" SortBy="@(b => b.Id)">BookingID</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="Booking" SortBy="@(b => b.TourSchedule.Title)">Title</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="Booking" SortBy="@(b => b.BookingDate)">Booking Date</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel T="Booking" SortBy="@(b => b.NumberOfParticipants)">Participants</MudTableSortLabel></MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Title">@(context.TourSchedule?.Title ?? "N/A")</MudTd>
                    <MudTd DataLabel="Booking Date">@context.BookingDate.ToString("g")</MudTd>
                    <MudTd DataLabel="Participants">@context.NumberOfParticipants</MudTd>
                    <MudTd>
                        <MudButton Class="mb-2" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small"
                                   OnClick="@(() => EditBooking(context))">Edit</MudButton>
                                   
                        <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" Class="ml-2"
                                   OnClick="@(() => OpenDeleteDialog(context))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Customer? Customer { get; set; }

    private List<Booking>? bookings;

    protected override async Task OnInitializedAsync()
    {
        if (Customer != null)
        {
            bookings = await CustomerService.GetBookingsByCustomerIdAsync(Customer.Id);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task EditBooking(Booking booking)
    {
        var bookingCopy = new Booking
            {
                Id = booking.Id,
                UserId = booking.UserId,
                TourScheduleId = booking.TourScheduleId,
                BookingDate = booking.BookingDate,
                NumberOfParticipants = booking.NumberOfParticipants,
                User = booking.User,
                TourSchedule = booking.TourSchedule
            };

        var parameters = new DialogParameters
            {
                ["Booking"] = bookingCopy
            };

        var dialog = DialogService.Show<EditBookingDialog>("Edit Booking", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var data = result.Data as dynamic;
                var updatedBooking = data.Booking as Booking;
                var originalParticipantCount = (int)data.OriginalParticipantCount;

                await BookingService.UpdateBookingAsync(updatedBooking, originalParticipantCount);
                // Refresh bookings list
                bookings = await CustomerService.GetBookingsByCustomerIdAsync(Customer!.Id);
                Snackbar.Add("Booking updated successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating booking: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenDeleteDialog(Booking booking)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to delete booking {booking.Id} for {booking.TourSchedule?.Title ?? "this tour"}?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error
            };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Booking", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await BookingService.DeleteBookingAsync(booking.Id);
                bookings = await CustomerService.GetBookingsByCustomerIdAsync(Customer!.Id);
                Snackbar.Add("Booking deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting booking: {ex.Message}", Severity.Error);
            }
        }
    }
}
