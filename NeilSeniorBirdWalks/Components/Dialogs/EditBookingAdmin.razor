@using NeilSeniorBirdWalks.Models
@using MudBlazor
@inject TourScheduleService TourScheduleService

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="isValid">
            <MudText Typo="Typo.h6" Class="mb-3">Edit Booking</MudText>

            <MudTextField Value="@BookingInfo" ReadOnly="true" Label="Booking Info" Variant="Variant.Outlined" Class="mb-3" />

            <MudTextField Value="@(Booking.User?.Email ?? "N/A")" ReadOnly="true" Label="User" Variant="Variant.Outlined" Class="mb-3" />

            <MudNumericField Label="Number of Participants"
                             @bind-Value="Booking.NumberOfParticipants"
                             Required="true"
                             Min="1"
                             Max="8"
                             ValidationMessage="Number of participants must be between 1 and 8"
                             HelperText="How many people will be joining the tour?"
                             Class="mb-3" />

            <MudAlert Severity="Severity.Info" Class="mt-3">
                Original number of participants: @originalParticipants
            </MudAlert>

            @if (errorMessage != null)
            {
                <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
        <MudButton OnClick="Save" Color="Color.Primary" Disabled="!isValid">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter]
    public Booking Booking { get; set; } = new Booking
        {
            UserId = string.Empty,
            TourScheduleId = 0,
            NumberOfParticipants = 1
        };

    private MudForm form;
    private bool isValid = true;
    private string errorMessage;
    private int originalParticipants;

    private string BookingInfo => $"{Booking.TourSchedule?.Title ?? "Unknown Tour"} - {Booking.TourSchedule?.StartDateTime.ToString("g") ?? "Unknown date"}";

    protected override void OnInitialized()
    {
     
        originalParticipants = Booking.NumberOfParticipants;
    }

    private async Task Save()
    {
        try
        {
            if (isValid)
            {
                if (Booking.NumberOfParticipants < 1 || Booking.NumberOfParticipants > 8)
                {
                    errorMessage = "Number of participants must be between 1 and 8";
                    return;
                }

              
                var result = new
                {
                    Booking,
                    OriginalParticipantCount = originalParticipants
                };

                MudDialog.Close(DialogResult.Ok(result));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving booking: {ex.Message}";
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
