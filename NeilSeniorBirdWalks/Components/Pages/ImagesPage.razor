@page "/gallery"
@using BlobStorageLibrary.Services
@using BlobStorageLibrary.Models
@using NeilSeniorBirdWalks.Components.Dialogs
@inject BlobStorageService BlobService
@inject IDialogService DialogService

<PageTitle>Gallery</PageTitle>
<HeaderImage BackgroundImageUrl="images/gallery-header.jpg" Title="Talon-ted Shots: Avian Artistry" Subtitle="Take A Gander At Our Image Gallery" ShowButtons="true"></HeaderImage>
<MudContainer>
    <MudGrid>
        @if (images == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudItem>
        }
        else if (!images.Any())
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No images found in storage.</MudAlert>
            </MudItem>
        }
        else
        {
            @foreach (var image in images)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudImage Src="@image.Uri"
                              Fluid="true"
                              ObjectFit="ObjectFit.Cover"
                              Elevation="3"
                              Style="cursor: pointer;"
                              Class="rounded-lg ma-2"
                              @onclick="() => OpenImageDialog(image)" />
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private List<BlobImage> images;

    protected override async Task OnInitializedAsync()
    {
        await LoadImagesAsync();
    }

    private async Task LoadImagesAsync()
    {
        // Load 50 images (or adjust as needed)
        images = await BlobService.GetImagesWithMetaDataAsync(50);
    }

    private void OpenImageDialog(BlobImage image)
    {
        var parameters = new DialogParameters
        {
            { "Image", image }
        };

        DialogService.Show<ViewImageFromGalleryDialog>("Image Viewer", parameters, new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                CloseOnEscapeKey = true
            });
    }

    private string FormatSize(long? sizeBytes)
    {
        if (!sizeBytes.HasValue)
            return "Unknown size";

        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = sizeBytes.Value;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }
}
