@page "/tours/location/{location}"
@page "/tours/location/{location}/{season}"
@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<PageTitle>@locationName @(seasonName != null ? $"- {seasonName} Tours" : "")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
	<MudBreadcrumbs Items="@breadcrumbs"></MudBreadcrumbs>

	@if (seasonName == null)
	{
		<MudText Typo="Typo.h3" Class="mb-4">@locationName Bird Watching</MudText>
		<MudText Class="mb-4">Choose a season for @locationName bird watching tours:</MudText>

		<MudGrid>
			@if (seasons != null)
			{
				@foreach (var season in seasons)
				{
					<MudItem xs="12" sm="6" md="3">
						<MudCard Elevation="3" Class="mb-4">
							<MudCardMedia Image="@($"/images/tours/{Location.ToLower()}-{season.SeasonCode}.jpg")" Height="150" />
							<MudCardContent>
								<MudText Typo="Typo.h5">@season.SeasonName</MudText>
							</MudCardContent>
							<MudCardActions>
								<MudButton Variant="Variant.Filled" Color="Color.Primary"
										   Href="@($"/tours/location/{Location}/{season.SeasonCode}")">Select</MudButton>
							</MudCardActions>
						</MudCard>
					</MudItem>
				}
			}
			else
			{
				<MudProgressCircular Indeterminate="true" />
			}
		</MudGrid>
	}
	else
	{
		<MudText Typo="Typo.h3" Class="mb-4">@seasonName Tours in @locationName</MudText>

		<TourDetails Location="@Location" Season="@Season" />
	}
	</MudContainer>

	@code {
	[Parameter] public string Location { get; set; }
	[Parameter] public string Season { get; set; }

	private string locationName;
	private string seasonName;
	private List<Season> seasons;
	private Location locationEntity;

	protected override async Task OnParametersSetAsync()
	{
		locationEntity = await DbContext.Locations
			.FirstOrDefaultAsync(l => l.LocationCode.ToLower() == Location.ToLower());

		if (locationEntity != null)
		{
			locationName = locationEntity.LocationName;

			// Load all seasons
			seasons = await DbContext.Seasons.ToListAsync();

			// If we have a season parameter, get its name
			if (!string.IsNullOrEmpty(Season))
			{
				var seasonEntity = await DbContext.Seasons
					.FirstOrDefaultAsync(s => s.SeasonCode.ToLower() == Season.ToLower());
				seasonName = seasonEntity?.SeasonName;
			}
		}
		else
		{
			// Fallback if location not found
			locationName = Location;
		}
	}

	private List<BreadcrumbItem> breadcrumbs => Season == null
		? new List<BreadcrumbItem>
			{
			new BreadcrumbItem("Tours", "/tours"),
			new BreadcrumbItem(locationName ?? Location, null, true)
			}
		: new List<BreadcrumbItem>
			{
			new BreadcrumbItem("Tours", "/tours"),
			new BreadcrumbItem(locationName ?? Location, $"/tours/location/{Location}"),
			new BreadcrumbItem(seasonName ?? Season, null, true)
			};
}

