@page "/news/{slug}"
@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@inject BlogService BlogService
@inject NavigationManager NavigationManager

<PageTitle>News Post - @(blogPost?.Title ?? "Loading...")</PageTitle>

<MudContainer Class="mt-4">
    @if (blogPost == null && !loading)
    {
        <MudAlert Severity="Severity.Error">Sorry, this blog post was not found.</MudAlert>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => NavigationManager.NavigateTo("/news"))">
            Back to News
        </MudButton>
    }
    else if (loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading...</MudText>
    }
    else
    {
        <div class="text-center mb-4">
            <MudText Typo="Typo.h3" Class="mb-2">@blogPost.Title</MudText>
            <MudText Typo="Typo.subtitle1">Published on @blogPost.CreatedDate.ToString("MMMM dd, yyyy")</MudText>
        </div>

        @if (!string.IsNullOrEmpty(blogPost.FeaturedImageUrl))
        {
            <div class="image-container">
                <MudPaper Elevation="0" Class="rounded-0" Style="overflow: hidden; text-align: center; background-color: #c3e0e5">
                    <MudImage Src="@blogPost.FeaturedImageUrl"
                              Alt="Featured image"
                              Style="max-width: 90%; height: auto; margin: 0 auto; display: block;"
                              Class="mx-auto"
                              ObjectFit="ObjectFit.Cover" />
                </MudPaper>
            </div>
        }


        @if (blogPost.ContentSections != null && blogPost.ContentSections.Any())
        {
            @for (int i = 0; i < blogPost.ContentSections.OrderBy(s => s.Id).Count(); i++)
            {
                var contentSection = blogPost.ContentSections.OrderBy(s => s.Id).ElementAt(i);
                bool isEven = i % 2 == 0;

                <MudPaper Class="pa-4 mb-6" Elevation="2" Style="background-color: white">
                    <div class="d-flex flex-column @(isEven ? "flex-md-row" : "flex-md-row-reverse") gap-4 align-center">
                        @if (!string.IsNullOrEmpty(contentSection.ImageUrl))
                        {
                            <div class="flex-shrink-0" style="width: 300px;">
                                <MudImage Src="@contentSection.ImageUrl" Alt="Section image" Width="300" Height="200"
                                          Class="rounded mud-elevation-2" ObjectFit="ObjectFit.Cover" />
                            </div>
                        }
                        <div class="flex-grow-1">
                            <MudText Typo="Typo.body1">@contentSection.Text</MudText>
                        </div>
                    </div>
                </MudPaper>
            }
        }

        @if (blogPost.AdditionalImageUrls != null && blogPost.AdditionalImageUrls.Any())
        {
            <MudText Typo="Typo.h5" Class="mt-6 mb-3">Additional Images</MudText>
            <MudGrid>
                @foreach (var imageUrl in blogPost.AdditionalImageUrls)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Elevation="3">
                            <MudCardMedia Image="@imageUrl" Height="200" />
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        <div class="mt-6">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => NavigationManager.NavigateTo("/news"))">
                Back to News
            </MudButton>
        </div>
    }
    </MudContainer>

    <style>
        .image-container {
            margin-bottom: 2rem;
            width: 100%;
            
        }

        @@media (min-width: 600px) {
            .image-container {
                margin-bottom: 3rem;
            }
        }
    </style>

    @code {
    [Parameter]
    public string Slug { get; set; }

    private BlogPost blogPost;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogPost();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            await LoadBlogPost();
        }
    }

    private async Task LoadBlogPost()
    {
        loading = true;
        try
        {
            blogPost = await BlogService.GetBlogPostBySlugAsync(Slug);
        }
        catch (Exception)
        {
            blogPost = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
}
