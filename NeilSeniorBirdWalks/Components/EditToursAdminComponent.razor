@using NeilSeniorBirdWalks.Components.Dialogs
@using System.Collections.Generic
@inject TourService TourService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Tour Management</MudText>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else if (tours == null || !tours.Any())
    {
        <MudAlert Severity="Severity.Info">No tours available.</MudAlert>
    }
    else
    {
        <MudTable Items="@tours" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@isLoading" 
        LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Tour Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Schedule Count</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Tour Name">@context.Title</MudTd>
                <MudTd DataLabel="Description">
                    <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 300px;">
                        @context.Description
                    </MudText>
                </MudTd>
                <MudTd DataLabel="Schedule Count">@(context.TourSchedules?.Count ?? 0)</MudTd>
                <MudTd>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small"
                    OnClick="@(() => OpenEditDialog(context))">Edit Tour</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" Class="ml-2"
                    OnClick="@(() => OpenDeleteDialog(context))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<Tour> tours;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadToursAsync();
    }

    private async Task LoadToursAsync()
    {
        try
        {
            isLoading = true;
            tours = await TourService.GetAllToursAsync();
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error loading tours: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenEditDialog(Tour tour)
    {
        var tourCopy = new Tour
            {
                TourId = tour.TourId,
                Title = tour.Title,
                Description = tour.Description,
                InfoHeadline = tour.InfoHeadline,
                InfoText = tour.InfoText,
                InfoImageUrl = tour.InfoImageUrl,
                Duration = tour.Duration,
                Price = tour.Price
            };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        var parameters = new DialogParameters { ["Tour"] = tourCopy };
        var dialog = DialogService.Show<EditTourAdminDialog>("Edit Tour", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadToursAsync();
        }
    }


    private async Task OpenDeleteDialog(Tour tour)
    {
        var parameters = new DialogParameters
            {
                ["ContentTExt"] = $"Are you sure you want to delete the tour '{tour.Title}'?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error
            };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Tour", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await TourService.DeleteTourAsync(tour.TourId);
            await LoadToursAsync();
            Snackbar.Add($"Tour '{tour.Title}' deleted successfully.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Tour deletion cancelled.", Severity.Warning);
        }
    }

}
        



	
