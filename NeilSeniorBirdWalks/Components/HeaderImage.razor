@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@using NeilSeniorBirdWalks.Components.Dialogs
@inject NavigationManager NavigationManager
@inject HeaderImageSettingsService SettingsService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="header-banner d-flex mb-5"
              Style="@($"overflow: hidden; background-image: url('{BackgroundImageUrl}');")">
    <div class="content-container">
        <div class="inner-content">
            <MudText Typo="Typo.h1" Color="Color.Tertiary" Class="fw-bold text-shadow-strong mb-2">
                @Title.ToUpper()
            </MudText>

            <MudText Typo="Typo.h2" Class="text-white text-shadow-strong mb-4">
                @Subtitle.ToUpper()
            </MudText>

            @if (ShowButtons)
            {
                <div class="button-container">
                    <MudButton @onclick="ViewTours" Variant="Variant.Filled" Color="Color.Primary"
                               Class="my-2 mx-1" Style="color: var(--mud-palette-white);">
                        View Tours
                    </MudButton>
                    <MudButton @onclick="AboutMe" Variant="Variant.Filled" Color="Color.Secondary"
                               Class="my-2 mx-1">
                        About Me
                    </MudButton>
                </div>
            }
        </div>
    </div>

    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Edit"
                       OnClick="OpenEditDialog"
                       Class="position-absolute top-0 end-0 m-2">
                Edit Header
            </MudButton>
        </Authorized>
    </AuthorizeView>
</MudContainer>

<style>
    .header-banner {
        min-height: 90vh;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        width: 100%;
        position: relative;
    }

    .content-container {
        padding: 2rem;
        width: 100%;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
    }

    .inner-content {
        max-width: 750px;
        background-color: transparent;
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
    }

    .text-shadow-strong {
        text-shadow: 2px 2px 4px rgba(0,0,0,0.8), -1px -1px 3px rgba(0,0,0,0.8) !important;
    }

    /* Mobile styles */
    @@media (max-width: 959.98px) {
        .content-container {
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 1rem;
        }

        .inner-content {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .button-container {
            flex-direction: column;
            align-items: center;
        }

            .button-container .mud-button {
                min-width: 200px;
            }
    }

    /* Desktop styles */
    @@media (min-width: 960px) {
        .content-container {
            justify-content: flex-start;
            padding: 2rem 0 0 2rem;
        }

        .button-container {
            flex-direction: row;
        }
    }
</style>

@code {
   
    private string Title { get; set; } = string.Empty;
    private string Subtitle { get; set; } = string.Empty;
    private string BackgroundImageUrl { get; set; } = string.Empty;

    
    [Parameter]
    public bool ShowButtons { get; set; } = true;

    
    [Parameter]
    public string PageIdentifier { get; set; } = "home";

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DeterminePageIdentifier();
        await LoadSettings();
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        
        DeterminePageIdentifier();
        await LoadSettings();
        await base.OnParametersSetAsync();
    }

    private void DeterminePageIdentifier()
    {
        if (string.IsNullOrEmpty(PageIdentifier) || PageIdentifier == "home")
        {
           
            var uri = NavigationManager.Uri;
            var segments = uri.Split('/');

           
            string lastSegment = "home";

            for (int i = segments.Length - 1; i >= 0; i--)
            {
                if (!string.IsNullOrEmpty(segments[i]))
                {
                    lastSegment = segments[i].ToLowerInvariant();
                    break;
                }
            }

            if (lastSegment == "localhost:5000" || lastSegment.Contains(".com") || lastSegment.Contains(".net"))
            {
                lastSegment = "home";
            }

            PageIdentifier = lastSegment;
        }
    }


    private async Task LoadSettings()
    {
        var settings = await SettingsService.GetHeaderSettingsAsync(PageIdentifier);
        if (settings != null)
        {
            Title = settings.Title;
            Subtitle = settings.Subtitle;
            BackgroundImageUrl = settings.BackgroundImageUrl;
        }
    }

    private async Task OpenEditDialog()
    {
        var parameters = new DialogParameters
        {
            { "Title", Title },
            { "Subtitle", Subtitle },
            { "BackgroundImageUrl", BackgroundImageUrl },
            { "PageIdentifier", PageIdentifier }
        };

        var dialog = await DialogService.ShowAsync<HeaderImageEditDialog>("Edit Header", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is HeaderImageSettings updatedSettings)
        {
            
            Title = updatedSettings.Title;
            Subtitle = updatedSettings.Subtitle;
            BackgroundImageUrl = updatedSettings.BackgroundImageUrl;

            Snackbar.Add("Header updated successfully", Severity.Success);
        }
    }

    private void ViewTours()
    {
        NavigationManager.NavigateTo("/tours");
    }

    private void AboutMe()
    {
        NavigationManager.NavigateTo("/about");
    }

    private void Calendar()
    {
        NavigationManager.NavigateTo("/calendar");
    }
}
