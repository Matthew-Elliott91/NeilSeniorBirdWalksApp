@using NeilSeniorBirdWalks.Data;
@using NeilSeniorBirdWalks.Models;
@using NeilSeniorBirdWalks.Services;
@inject IContactService ContactService


<MudTable Items="@contactForms" Filter="@FilterFunc" SortLabel="Sort By" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Striped="true" RowStyleFunc="@RowStyleFunc">
	<ToolBarContent>
		<MudText Typo="Typo.h2">Contact Messages</MudText>
		<MudSpacer/>
		<MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.Name">Name</MudTableSortLabel></MudTh>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.Email">Email</MudTableSortLabel></MudTh>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.Phone">Phone</MudTableSortLabel></MudTh>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.Subject">Subject</MudTableSortLabel></MudTh>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.Message">Message</MudTableSortLabel></MudTh>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.DateSubmitted">Date</MudTableSortLabel></MudTh>
		<MudTh> <MudTableSortLabel T="ContactFormModel" SortBy="x => x.IsRead">Read</MudTableSortLabel></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.Name</MudTd>
		<MudTd DataLabel="Email">@context.Email</MudTd>
		<MudTd DataLabel="Phone">@context.Name</MudTd>
		<MudTd DataLabel="Subject">@context.Subject</MudTd>
		<MudTd DataLabel="Message">@context.Message</MudTd>
		<MudTd DataLabel="Date">@context.DateSubmitted</MudTd>
		<MudTd DataLabel="Read">
			<MudButton Variant="Variant.Filled"
			Color="@(context.IsRead ? Color.Default : Color.Success)"
			Size="Size.Small"
			OnClick="@(() => ReadMessage(context))">
				Read Message
			</MudButton>
		</MudTd>
	</RowTemplate>
</MudTable>
@code {
	private List<ContactFormModel> contactForms = new List<ContactFormModel>();
	private string searchString = string.Empty;
	protected override async Task OnInitializedAsync()
	{
		contactForms = await ContactService.GetAllContactFormsAsync();
	}

	private bool FilterFunc(ContactFormModel context)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (context.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (context.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (context.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (context.Subject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (context.Message.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (context.DateSubmitted.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (context.IsRead.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private async Task ReadMessage(ContactFormModel contact)
	{
		if (contact.IsRead == false)
		{
			contact.IsRead = !contact.IsRead;
			await ContactService.UpdateContactFormReadStatusAsync(contact.Id, contact.IsRead);
			StateHasChanged();
		}
		
	}



	private string RowStyleFunc(ContactFormModel contact, int index)
	{
		if (!contact.IsRead)
			return "background-color: #c8e6c9;"; 

		return string.Empty; 
	}
}
