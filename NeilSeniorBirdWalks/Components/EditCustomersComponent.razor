@using NeilSeniorBirdWalks.Components.Dialogs;
@inject CustomerService CustomerService;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

<MudTable Items="AllCustomers" Hover="true" Striped="true" Bordered="true" Filter="@FilterFunc">
	<ToolBarContent>
		<MudText Typo="Typo.h4">Customers</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel T="Customer" SortBy="@(c => c.Id)">CustomerID</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel T="Customer" SortBy="@(c => c.User?.Email)">Email</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel T="Customer" SortBy="@(c => c.FirstName)">First Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel T="Customer" SortBy="@(c => c.LastName)">Last Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel T="Customer" SortBy="@(c => c.User?.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel T="Customer" SortBy="@(c => c.Address)">Address</MudTableSortLabel></MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="ID">@context.Id</MudTd>
		<MudTd DataLabel="Email">@(context.User?.Email ?? "N/A")</MudTd>
		<MudTd DataLabel="First Name">@context.FirstName</MudTd>
		<MudTd DataLabel="Last Name">@context.LastName</MudTd>
		<MudTd DataLabel="Phone Number">@context.User?.PhoneNumber</MudTd>
		<MudTd DataLabel="Address">
			@if (context.Address != null)
			{
				<div>
					@context.Address.AddressLine1<br />
					@context.Address.AddressLine2<br />
					@context.Address.City<br />
					@context.Address.Postcode<br />
				</div>
			}
			else
			{
				<span>No address available</span>
			}
		</MudTd>
		<MudTd>
			<MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small"
			OnClick="@(() => OpenCustomerBookingsDialog(context))">View Bookings</MudButton>
			<MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" Class="ml-2"
			OnClick="@(() => OpenDeleteDialog(context))">Delete</MudButton>
		</MudTd>
	</RowTemplate>
</MudTable>


@code {
	private List<Customer> AllCustomers { get; set; } = new();
	private string searchString = "";
	private Customer? selectedCustomer;

	protected override async Task OnInitializedAsync()
	{
		AllCustomers = await CustomerService.GetAllCustomersAsync();
	}

	private bool FilterFunc(Customer customer)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;

		return customer.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
			|| (customer.User?.Email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
			|| (customer.FirstName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
			|| (customer.LastName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
			|| (customer.User?.PhoneNumber?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
			|| (customer.Address?.AddressLine1?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
			|| (customer.Address?.City?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
			|| (customer.Address?.Postcode?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);
	}


	private async Task OpenCustomerBookingsDialog(Customer customer)
	{
		var parameters = new DialogParameters
			{
				["Customer"] = customer
			};
		var dialog = DialogService.Show<CustomerBookingsDialog>("Customer Bookings", parameters);

	}

	private async Task OpenDeleteDialog(Customer customer)
	{
		var parameters = new DialogParameters
		{
				["ContentText"] = $"Are you sure you want to delete customer {customer.FirstName} {customer.LastName}?",
				["ButtonText"] = "Delete",
				["Color"] = Color.Error
				
		};
		var dialog = DialogService.Show<ConfirmationDialog>("Delete Customer", parameters);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await CustomerService.DeleteCustomerAsync(customer.Id);
			Snackbar.Add("Customer deleted successfully", Severity.Success);
			AllCustomers = await CustomerService.GetAllCustomersAsync();
		}
		else
		{
			Snackbar.Add("Customer deletion cancelled", Severity.Warning);
		}
	}

	

}
