@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using MudExRichTextEditor
@inject PageContentService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar


<AuthorizeView Roles="Admin">
    <Authorized>
        <MudPaper Elevation="0" Class="mb-2">
            @if (isEditMode)
            {
                <MudButton Color="Color.Primary"
                OnClick="SaveChanges"
                StartIcon="@Icons.Material.Filled.Save"
                Variant="Variant.Filled"
                Class="mr-2">
                    Save Changes
                </MudButton>
                <MudButton Color="Color.Default"
                OnClick="CancelEdits"
                StartIcon="@Icons.Material.Filled.Cancel">
                    Cancel
                </MudButton>
            }
            else
            {
                <MudButton Color="Color.Primary"
                OnClick="@(() => isEditMode = true)"
                StartIcon="@Icons.Material.Filled.Edit"
                Variant="Variant.Outlined">
                    Edit Content
                </MudButton>
            }
        </MudPaper>
    </Authorized>
</AuthorizeView>

@if (Content != null)
{
    <MudPaper Elevation="3" Class="pa-6 mb-6" Style="background-color: white">
        <AuthorizeView Roles="Admin">
            <Authorized>
                @if (isEditMode)
                {
                    <MudTextField @bind-Value="editableContent.Title" Label="Title" Variant="Variant.Outlined"
                    Class="mb-3" Immediate="true" />
                    <MudTextField @bind-Value="editableContent.Subtitle" Label="Subtitle" Variant="Variant.Outlined"
                    Class="mb-3" />
                }
                else
                {
                    <MudText Typo="Typo.h3" Class="mb-2" Color="Color.Primary">@Content.Title</MudText>
                    <MudText Typo="Typo.h5" Class="mb-6">@Content.Subtitle</MudText>
                }
            </Authorized>
            <NotAuthorized>
                <MudText Typo="Typo.h3" Class="mb-2" Color="Color.Primary">@Content.Title</MudText>
                <MudText Typo="Typo.h5" Class="mb-6">@Content.Subtitle</MudText>
            </NotAuthorized>
        </AuthorizeView>

        <MudGrid>
            <MudItem xs="12" md="6">
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        @if (isEditMode)
                        {
                            <MudExRichTextEdit @bind-Value="editableContent.MainContent"
                            Class="mb-3" />
                        }
                        else
                        {
                            <MudText Class="mb-4">@((MarkupString)Content.MainContent)</MudText>
                        }
                    </Authorized>
                    <NotAuthorized>
                        <MudText Class="mb-4">@((MarkupString)Content.MainContent)</MudText>
                    </NotAuthorized>
                </AuthorizeView>
            </MudItem>
            <MudItem xs="12" md="6">
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        @if (isEditMode)
                        {
                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" MaximumFileCount="1" OnFilesChanged="UploadMainImage" Validation="(Func<IBrowserFile, bool>)ValidateImageFile">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Edit Image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            @if (!string.IsNullOrEmpty(editableContent.MainContentImage))
                            {
                                <MudImage Src="@editableContent.MainContentImage" Alt="Main content image preview"
                                Class="rounded-lg mt-2" Elevation="2"
                                ObjectFit="ObjectFit.Cover" Height="200" Width="300" />
                            }
                        }
                        else if (!string.IsNullOrEmpty(Content.MainContentImage))
                        {
                            <MudImage Src="@Content.MainContentImage" Alt="Main content image"
                            Class="rounded-lg" Elevation="2"
                            ObjectFit="ObjectFit.Cover" Height="400" Fluid="true" />
                        }
                    </Authorized>
                    <NotAuthorized>
                        @if (!string.IsNullOrEmpty(Content.MainContentImage))
                        {
                            <MudImage Src="@Content.MainContentImage" Alt="Main content image"
                            Class="rounded-lg" Elevation="2"
                            ObjectFit="ObjectFit.Cover" Height="400" Fluid="true" />
                        }
                    </NotAuthorized>
                </AuthorizeView>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-6" />


        <AuthorizeView Roles="Admin">
            <Authorized>
                @if (isEditMode)
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudExRichTextEdit @bind-Value="editableContent.SecondaryContent"
                            Class="mb-3" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                           <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" MaximumFileCount="1" OnFilesChanged="UploadSecondaryImage" Validation="(Func<IBrowserFile, bool>)ValidateImageFile">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Edit Image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            @if (!string.IsNullOrEmpty(editableContent.SecondaryContentImage))
                            {
                                <MudImage Src="@editableContent.SecondaryContentImage" Alt="Secondary content image preview"
                                Class="rounded-lg mt-2" Elevation="2"
                                ObjectFit="ObjectFit.Cover" Height="200" Width="300" />
                            }
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    @if (!string.IsNullOrEmpty(Content.SecondaryContent))
                    {
                        <MudGrid>
                            <MudItem xs="12" md="6" Order="2" OrderMd="1">
                                @if (!string.IsNullOrEmpty(Content.SecondaryContentImage))
                                {
                                    <MudImage Src="@Content.SecondaryContentImage" Alt="Secondary content image"
                                    Class="rounded-lg" Elevation="2"
                                    ObjectFit="ObjectFit.Cover" Height="400" Fluid="true" />
                                }
                            </MudItem>
                            <MudItem xs="12" md="6" Order="1" OrderMd="2">
                                <MudText Class="mb-4">@((MarkupString)Content.SecondaryContent)</MudText>
                            </MudItem>
                        </MudGrid>
                    }
                }
            </Authorized>
            <NotAuthorized>
                @if (!string.IsNullOrEmpty(Content.SecondaryContent))
                {
                    <MudGrid>
                        <MudItem xs="12" md="6" Order="2" OrderMd="1">
                            @if (!string.IsNullOrEmpty(Content.SecondaryContentImage))
                            {
                                <MudImage Src="@Content.SecondaryContentImage" Alt="Secondary content image"
                                Class="rounded-lg" Elevation="2"
                                ObjectFit="ObjectFit.Cover" Height="400" Fluid="true" />
                            }
                        </MudItem>
                        <MudItem xs="12" md="6" Order="1" OrderMd="2">
                            <MudText Class="mb-4">@((MarkupString)Content.SecondaryContent)</MudText>
                        </MudItem>
                    </MudGrid>
                }
            </NotAuthorized>
        </AuthorizeView>

        <MudDivider Class="my-6" />


        <AuthorizeView Roles="Admin">
            <Authorized>
                @if (isEditMode)
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudExRichTextEdit @bind-Value="editableContent.TertiaryContent"
                            Class="mb-3" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" MaximumFileCount="1" OnFilesChanged="UploadTertiaryImage" Validation="(Func<IBrowserFile, bool>)ValidateImageFile">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Edit Image
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                            @if (!string.IsNullOrEmpty(editableContent.TertiaryContentImage))
                            {
                                <MudImage Src="@editableContent.TertiaryContentImage" Alt="Tertiary content image preview"
                                Class="rounded-lg mt-2" Elevation="2"
                                ObjectFit="ObjectFit.Cover" Height="200" Width="300" />
                            }
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    @if (!string.IsNullOrEmpty(Content.TertiaryContent))
                    {
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudText Class="mb-4">@((MarkupString)Content.TertiaryContent)</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                @if (!string.IsNullOrEmpty(Content.TertiaryContentImage))
                                {
                                    <MudImage Src="@Content.TertiaryContentImage" Alt="Tertiary content image"
                                    Class="rounded-lg" Elevation="2"
                                    ObjectFit="ObjectFit.Cover" Height="400"
                                    Fluid="true" />
                                }
                            </MudItem>
                        </MudGrid>
                    }
                }
            </Authorized>
            <NotAuthorized>
                @if (!string.IsNullOrEmpty(Content.TertiaryContent))
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudText Class="mb-4">@((MarkupString)Content.TertiaryContent)</MudText>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            @if (!string.IsNullOrEmpty(Content.TertiaryContentImage))
                            {
                                <MudImage Src="@Content.TertiaryContentImage" Alt="Tertiary content image"
                                Class="rounded-lg" Elevation="2"
                                ObjectFit="ObjectFit.Cover" Height="400"
                                Fluid="true" />
                            }
                        </MudItem>
                    </MudGrid>
                }
            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
}
else
{
    <MudSkeleton Width="100%" Height="200px" />
    <MudSkeleton Width="60%" Height="30px" Class="mt-4" />
    <MudSkeleton Width="90%" Height="20px" Class="mt-2" />
    <MudSkeleton Width="90%" Height="20px" Class="mt-1" />
}

@code {
    [Parameter]
    public string PageType { get; set; }

    [Parameter]
    public PageContent Content { get; set; }

    private bool isEditMode = false;
    private PageContent editableContent = new();
	private IBrowserFile? tempMainImageFile;
    private string? tempMainImagePath;
    private IBrowserFile? tempSecondaryImageFile;
    private string? tempSecondaryImagePath;
    private IBrowserFile? tempTertiaryImageFile;
    private string? tempTertiaryImagePath;

	protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PageType) && Content == null)
        {
            Content = await DataService.GetPageContentAsync(PageType);
        }

        if (Content != null)
        {

            CopyContentToEditable();
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(PageType) && Content == null)
        {
            Content = await DataService.GetPageContentAsync(PageType);
            if (Content != null)
            {
                CopyContentToEditable();
            }
        }

        await base.OnParametersSetAsync();
    }

    private void CopyContentToEditable()
    {
        editableContent = new PageContent
            {
                Id = Content.Id,
                PageType = Content.PageType,
                Title = Content.Title,
                Subtitle = Content.Subtitle,
                MainContent = Content.MainContent,
                MainContentImage = Content.MainContentImage,
                SecondaryContent = Content.SecondaryContent,
                SecondaryContentImage = Content.SecondaryContentImage,
                TertiaryContent = Content.TertiaryContent,
                TertiaryContentImage = Content.TertiaryContentImage,
                IsPublished = Content.IsPublished
            };
    }

    private async Task UploadMainImage(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
        if (file != null)
        {
            // Validate file type
            string extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
            {
                Snackbar.Add("Only .jpg, .jpeg, and .png files are allowed.", Severity.Error);
                return;
            }
            
            // Store the file reference temporarily
            tempMainImageFile = file;
            
            // Generate a temporary preview
            var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            // Create a temporary data URL for preview only
            var format = $"image/{(extension == ".png" ? "png" : "jpeg")}";
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            var dataUrl = $"data:{format};base64,{base64}";
            
            // Update UI with preview only, but don't save to disk yet
            editableContent.MainContentImage = dataUrl;
            
            // Remember we have a pending file
            tempMainImagePath = $"{Guid.NewGuid()}_{file.Name}";
            
            StateHasChanged();
            Snackbar.Add("Image selected. Click 'Save Changes' to apply.", Severity.Info);
        }
            
          
        } catch (Exception ex)
		{
			 Snackbar.Add($"Failed to process image: {ex.Message}", Severity.Error);
		}
		
	}

     private async Task UploadSecondaryImage(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
        if (file != null)
        {
            // Validate file type
            string extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
            {
                Snackbar.Add("Only .jpg, .jpeg, and .png files are allowed.", Severity.Error);
                return;
            }
            
            // Store the file reference temporarily
            tempSecondaryImageFile = file;
            
            // Generate a temporary preview
            var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            // Create a temporary data URL for preview only
            var format = $"image/{(extension == ".png" ? "png" : "jpeg")}";
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            var dataUrl = $"data:{format};base64,{base64}";
            
            // Update UI with preview only, but don't save to disk yet
            editableContent.SecondaryContentImage = dataUrl;
            
            // Remember we have a pending file
            tempSecondaryImagePath = $"{Guid.NewGuid()}_{file.Name}";
            
            StateHasChanged();
            Snackbar.Add("Image selected. Click 'Save Changes' to apply.", Severity.Info);
        }
            
          
        } catch (Exception ex)
		{
			 Snackbar.Add($"Failed to process image: {ex.Message}", Severity.Error);
		}
		
	}

     private async Task UploadTertiaryImage(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
        if (file != null)
        {
            // Validate file type
            string extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
            {
                Snackbar.Add("Only .jpg, .jpeg, and .png files are allowed.", Severity.Error);
                return;
            }
            
            // Store the file reference temporarily
            tempTertiaryImageFile = file;
            
            // Generate a temporary preview
            var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            // Create a temporary data URL for preview only
            var format = $"image/{(extension == ".png" ? "png" : "jpeg")}";
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            var dataUrl = $"data:{format};base64,{base64}";
            
            // Update UI with preview only, but don't save to disk yet
            editableContent.TertiaryContentImage = dataUrl;
            
            // Remember we have a pending file
            tempTertiaryImagePath = $"{Guid.NewGuid()}_{file.Name}";
            
            StateHasChanged();
            Snackbar.Add("Image selected. Click 'Save Changes' to apply.", Severity.Info);
        }
            
          
        } catch (Exception ex)
		{
			 Snackbar.Add($"Failed to process image: {ex.Message}", Severity.Error);
		}
		
	}

	private bool ValidateImageFile(IBrowserFile file)
	{
		if (file == null)
		    return true;

		string extension = Path.GetExtension(file.Name).ToLowerInvariant();
        return extension == ".jpg" || extension == ".jpeg" || extension == ".png";

	}

    // Switching from edit mode to view mode - save changes
    private async Task OnEditToggled(bool toggled)
    {
        if (!toggled) 
        {
            await SaveChanges();
        }

        isEditMode = toggled;
    }

    private async Task SaveChanges()
{
    try
    {
        // Handle main image if uploaded
        if (tempMainImageFile != null)
        {
            var filePath = Path.Combine("wwwroot", "images", "uploads", tempMainImagePath);
            var relativePath = $"/images/uploads/{tempMainImagePath}";
            
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await tempMainImageFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(fileStream);
            }
            
            editableContent.MainContentImage = relativePath;
            tempMainImageFile = null;
            tempMainImagePath = null;
        }
        
        // Handle secondary image if uploaded
        if (tempSecondaryImageFile != null)
        {
            var filePath = Path.Combine("wwwroot", "images", "uploads", tempSecondaryImagePath);
            var relativePath = $"/images/uploads/{tempSecondaryImagePath}";
            
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await tempSecondaryImageFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(fileStream);
            }
            
            editableContent.SecondaryContentImage = relativePath;
            tempSecondaryImageFile = null;
            tempSecondaryImagePath = null;
        }
        
        // Handle tertiary image if uploaded
        if (tempTertiaryImageFile != null)
        {
            var filePath = Path.Combine("wwwroot", "images", "uploads", tempTertiaryImagePath);
            var relativePath = $"/images/uploads/{tempTertiaryImagePath}";
            
            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
            
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await tempTertiaryImageFile.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(fileStream);
            }
            
            editableContent.TertiaryContentImage = relativePath;
            tempTertiaryImageFile = null;
            tempTertiaryImagePath = null;
        }
        
        // Save to database
        await DataService.UpdatePageContentAsync(editableContent);
        Content = editableContent;
        CopyContentToEditable();
        isEditMode = false;
        Snackbar.Add("Content successfully updated", Severity.Success);
    }
    catch (Exception ex)
    {
        Snackbar.Add($"Failed to save changes: {ex.Message}", Severity.Error);
    }
}

private void CancelEdits()
{
    // Clear all pending uploads
    tempMainImageFile = null;
    tempMainImagePath = null;
    tempSecondaryImageFile = null;
    tempSecondaryImagePath = null;
    tempTertiaryImageFile = null;
    tempTertiaryImagePath = null;
    
    CopyContentToEditable();
    isEditMode = false;
    Snackbar.Add("Edits cancelled", Severity.Info);
}


}
