@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using NeilSeniorBirdWalks.Data
@using BlobStorageLibrary.Models

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject BlobStorageService BlobStorageService
@inject IServiceProvider ServiceProvider

<PageTitle>Register</PageTitle>

<MudGrid>
    <MudItem xs="12" md="6">
        <h1>Register</h1>
        <section>
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2>Create a new account.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FirstName" class="form-control" aria-required="true" placeholder="First Name" />
                    <label for="firstName">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.LastName" class="form-control" aria-required="true" placeholder="Last Name" />
                    <label for="lastName">Last Name</label>
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.AddressLine1" class="form-control" aria-required="true" placeholder="Address Line 1" />
                    <label for="addressLine1">Address Line 1</label>
                    <ValidationMessage For="() => Input.AddressLine1" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.AddressLine2" class="form-control" placeholder="Address Line 2" />
                    <label for="addressLine2">Address Line 2</label>
                    <ValidationMessage For="() => Input.AddressLine2" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.City" class="form-control" aria-required="true" placeholder="City" />
                    <label for="city">City</label>
                    <ValidationMessage For="() => Input.City" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.County" class="form-control" aria-required="true" placeholder="County" />
                    <label for="county">County</label>
                    <ValidationMessage For="() => Input.County" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Postcode" class="form-control" aria-required="true" placeholder="Postcode" />
                    <label for="postcode">Postcode</label>
                    <ValidationMessage For="() => Input.Postcode" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        </section>
    </MudItem>

    <MudItem xs="12" md="6" Class="d-flex align-center justify-center">
        @if (BlobImage != null)
        {
            <MudImage Src="@BlobImage.Uri" Alt="@BlobImage.Name"
            ObjectPosition="ObjectPosition.Center"
            ObjectFit="ObjectFit.Contain"
            Height="400" Fluid="true"></MudImage>
        }
        else
        {
            <p>No image available</p>
        }
    </MudItem>

    <MudItem xs="12" md="3">
        <div class="d-flex flex-column gap-2">
            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            Href="Account/Login"
            FullWidth="true"
            Class="text-white">
                Already have an account? Log in
            </MudButton>

            <MudButton Variant="Variant.Filled"
            Color="Color.Secondary"
            Href="Account/ResendEmailConfirmation"
            FullWidth="true"
            Class="text-white">
                Resend email confirmation
            </MudButton>
        </div>
    </MudItem>
</MudGrid>

@code {

    private IEnumerable<IdentityError>? identityErrors;
    private BlobImage? BlobImage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        await LoadRandomImageAsync();
    }

    private async Task LoadRandomImageAsync()
    {
        BlobImage = await BlobStorageService.GetRandomImageAsync();

    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

		// Added new Customer object to the database
		var customer = new Customer
        {
				FirstName = Input.FirstName,
				LastName = Input.LastName,
                Address = new Address
                {
                    AddressLine1 = Input.AddressLine1,
                    AddressLine2 = Input.AddressLine2,
                    City = Input.City,
                    County = Input.County,
                    Postcode = Input.Postcode,                },

				UserId = await UserManager.GetUserIdAsync(user)

		};
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
        dbContext.Customers.Add(customer);
        await dbContext.SaveChangesAsync();


        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
{
    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(50, ErrorMessage = "First name must be less than 50 characters")]
    [Display(Name = "First Name")]
    public string FirstName { get; set; } = "";

    [Required]
    [StringLength(50, ErrorMessage = "Last name must be less than 50 characters")]
    [Display(Name = "Last Name")]
    public string LastName { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "Address line 1 must be less than 100 characters")]
    [Display(Name = "Address Line 1")]
    public string AddressLine1 { get; set; } = "";

    [StringLength(100, ErrorMessage = "Address line 2 must be less than 100 characters")]
    [Display(Name = "Address Line 2")]
    public string AddressLine2 { get; set; } = "";

    [Required]
    [StringLength(50, ErrorMessage = "City must be less than 50 characters")]
    [Display(Name = "City")]
    public string City { get; set; } = "";

    [Required]
    [StringLength(50, ErrorMessage = "County must be less than 50 characters")]
    [Display(Name = "County")]
    public string County { get; set; } = "";

    [Required]
    [StringLength(10, ErrorMessage = "Postcode must be less than 10 characters")]
    [Display(Name = "Postcode")]
    public string Postcode { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";
}

}
