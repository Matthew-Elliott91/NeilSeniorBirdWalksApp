@page "/Account/Login"


@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using NeilSeniorBirdWalks.Data
@using BlobStorageLibrary.Models
@using MudBlazor.StaticInput
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject BlobStorageService BlobStorageService

<PageTitle>Log in</PageTitle>

<MudGrid>
   
    <MudItem xs="12" md="6">
        <h1>Log in to an existing account</h1>
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <MudStaticTextField @bind-Value="Input.Password"
                                        InputType="InputType.Password"
                                        Adornment="Adornment.End"
                                        AdornmentIcon="@Icons.Material.Outlined.VisibilityOff"
                                        AdornmentClickFunction="showPassword"
                                        Class="form-control"
                                        Placeholder="Password"
                                        AutoComplete="current-password"
                                        AriaRequired="true" />
                   
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary mb-3">Log in</button>
                </div>
            </EditForm>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Href="Account/register"
                       FullWidth="true"
                       Class="text-white">
                Dont Have an Account? Click Here To Register!
            </MudButton>
        </section>

	</MudItem>

    <MudItem xs="12" md="6"Class="d-flex align-center justify-center">
        @if (BlobImage != null)
        {
            <MudImage Src="@BlobImage.Uri" Alt="@BlobImage.Name"
                      ObjectPosition="ObjectPosition.Center"
                      ObjectFit="ObjectFit.Contain"
                      Height="400" Fluid="true"></MudImage>
        }
        else
        {
            <p>No image available</p>
        }
    </MudItem>

   
    <MudItem xs="12" md="3">
        <div class="d-flex flex-column gap-2">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       Href="Account/ForgotPassword"
                       FullWidth="true"
                       Class="text-white">
                Forgot your password?
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Href="Account/ResendEmailConfirmation"
                       FullWidth="true"
                       Class="text-white">
                Resend email confirmation
            </MudButton>
        </div>
    </MudItem>
</MudGrid>
<script>
    let timeoutId;

    function showPassword(inputElement, button) {
        if (inputElement.type === 'password') {
            inputElement.type = 'text';
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                inputElement.type = 'password';
            }, 5000);
        } else {
            inputElement.type = 'password';
            clearTimeout(timeoutId);
        }
    }
</script>
@code {
    private string? errorMessage;
    private BlobImage? BlobImage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task LoadRandomImageAsync()
    {
        BlobImage = await BlobStorageService.GetRandomImageAsync();
      
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            await LoadRandomImageAsync();
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
