@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@inject TourService TourService
@inject NavigationManager NavigationManager

	<MudGrid Class="mt-2">
		@if (tours != null)
		{
			@foreach (var tour in tours.Take(6))
			{
				<MudItem xs="12" sm="6" md="4">
					<MudCard Elevation="25" Class="rounded-lg pb-4" Style="background-color: white">
						<MudCardHeader>
							<CardHeaderContent>
								<MudText Typo="Typo.h5" Align="Align.Center">@tour.Title</MudText>
							</CardHeaderContent>
						</MudCardHeader>
						<MudCardContent>
							<div class="d-flex justify-center">
								<MudText Typo="Typo.h3">@GetFormattedPrice(tour.Price)</MudText>
								<MudText Typo="Typo.h5" Class="ml-1 mt-5" Color="Color.Secondary">/tour</MudText>
							</div>
							<MudList T="string" Class="mx-auto mt-4" Style="width:300px;">
								<MudListItem Icon="@Icons.Material.Filled.LocationOn" IconColor="Color.Tertiary">
									@tour.Location.LocationName
								</MudListItem>
								<MudListItem Icon="@Icons.Material.Filled.CalendarToday" IconColor="Color.Tertiary">
									@tour.Season.SeasonName Season
								</MudListItem>
								@if (tour.Duration.HasValue)
								{
									<MudListItem Icon="@Icons.Material.Filled.Timer" IconColor="Color.Tertiary">
										@(tour.Duration.Value / 60)h @(tour.Duration.Value % 60)m duration
									</MudListItem>
								}
							</MudList>
						</MudCardContent>
						<MudCardActions Class="d-flex justify-center">
							<MudButton Variant="Variant.Filled"
							           Color="Color.Primary"
							           Size="Size.Large"
							           Style="width:50%;"
							           Href="@($"/tours/location/{tour.Location.LocationCode}/{tour.Season.SeasonCode}")">
								View Tour
							</MudButton>
						</MudCardActions>
					</MudCard>
				</MudItem>
			}
		}
		else
		{
			<MudItem xs="12">
				<MudProgressCircular Indeterminate="true" />
			</MudItem>
		}
	</MudGrid>

@code {
	private List<Tour> tours;
    
	protected override async Task OnInitializedAsync()
	{
		tours = await TourService.GetTourPricingAsync();
	}
    
	private string GetFormattedPrice(decimal? price)
	{
		return price.HasValue ? $"£{price.Value:0.00}" : "Price TBD";
	}

	private void NavigateToTour(Tour tour)
	{
		NavigationManager.NavigateTo($"tours?location={tour.Location.LocationCode}&season={tour.Season.SeasonCode}");
	}
}
