@using NeilSeniorBirdWalks.Models
@using NeilSeniorBirdWalks.Services
@using NeilSeniorBirdWalks.Components.Dialogs
@inject BlogService BlogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Blog Management</MudText>

    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog" Class="mb-4">
        Add New Blog Post
    </MudButton>

    <MudTable Items="@BlogPosts" Dense="true" Hover="true" Loading="@isLoading" LoadingProgressColor="Color.Primary">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Blog Posts</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Slug</MudTh>
            <MudTh>Date Created</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Slug">@context.Slug</MudTd>
            <MudTd DataLabel="Date Created">@context.CreatedDate.ToShortDateString()</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => OpenEditDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteBlog(context.Id))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private List<BlogPost> BlogPosts = new List<BlogPost>();
    private string searchString = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogPosts();
    }

    private async Task LoadBlogPosts()
    {
        isLoading = true;
        BlogPosts = await BlogService.GetAllBlogPostsAsync();
        isLoading = false;
    }

    private async Task OpenAddDialog()
    {
        var blogPost = new BlogPost
            {
                Title = "",
                Slug = "",
                FeaturedImageUrl = "",
                CreatedDate = DateTime.Today,
                ContentSections = new List<ContentSection>(),
                AdditionalImageUrls = new List<string>()
            };

        var parameters = new DialogParameters { ["BlogPost"] = blogPost, ["IsNew"] = true };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true };

        var dialog = DialogService.Show<BlogEditDialog>("Add Blog Post", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var newBlogPost = result.Data as BlogPost;
                await BlogService.CreateBlogPostAsync(newBlogPost);
                Snackbar.Add("Blog post created successfully", Severity.Success);
                await LoadBlogPosts();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenEditDialog(BlogPost blogPost)
    {
        
        var fullBlogPost = await BlogService.GetBlogPostByIdAsync(blogPost.Id);
        if (fullBlogPost == null)
        {
            Snackbar.Add("Blog post not found", Severity.Error);
            return;
        }

        var parameters = new DialogParameters { ["BlogPost"] = fullBlogPost, ["IsNew"] = false };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true };

        var dialog = DialogService.Show<BlogEditDialog>("Edit Blog Post", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var updatedBlogPost = result.Data as BlogPost;
                await BlogService.UpdateBlogPostAsync(updatedBlogPost);
                Snackbar.Add("Blog post updated successfully", Severity.Success);
                await LoadBlogPosts();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteBlog(int id)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = "Are you sure you want to delete this blog post?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error
            };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await BlogService.DeleteBlogPostAsync(id);
            await LoadBlogPosts();
            Snackbar.Add("Blog post deleted", Severity.Success);
        }
    }
}
